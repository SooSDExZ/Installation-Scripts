#!/usr/bin/env bash

#****************************************************************************************************#
#                                        REMCHAIN-TESTNET-V2                                         #
#****************************************************************************************************#

#-----------------------------------------------------------------------------------------------------
# UPDATING AND UPGRADING PACKAGE DATABASE 
#-----------------------------------------------------------------------------------------------------

sudo -S apt update && sudo -S apt upgrade
printf "\nSET YOUR NEW ROOT PASSWORD:\n"
passwd root
echo ""

#-----------------------------------------------------------------------------------------------------
# CHANGING DEFAULT SSH PORT NUMBER
#-----------------------------------------------------------------------------------------------------

while [ : ] 
do

	 read -p "CHOOSE A RANDOM 5 DIGIT PORT NUMBER: " portnumber
 
         if [[ ${#portnumber} -ne 5 ]]
         then
                 printf "\nERROR: PORT NUMBER SHOULD BE EXACTLY 5 DIGITS.\n\n"
                 continue
         elif [[ ! -z "${portnumber//[0-9]}" ]]
         then
                 printf "\nERROR: PORT NUMBER SHOULD CONTAIN NUMBERS ONLY.\n\n"
                 continue
         else
                 sudo -S sed -i "/^#Port 22/s/#Port 22/Port $portnumber/" /etc/ssh/sshd_config && sed -i '/^PermitRootLogin/s/yes/no/' /etc/ssh/sshd_config
                 break
         fi  
done

#-----------------------------------------------------------------------------------------------------
# INSTALLING UNCOMPLICATED FIREWALL
#-----------------------------------------------------------------------------------------------------

sudo -S apt-get install ufw -y
sudo -S ufw allow ssh/tcp
sudo -S ufw limit ssh/tcp
sudo -S ufw allow $portnumber/tcp
sudo -S ufw allow 8888/tcp
sudo -S ufw allow 9877/tcp
sudo -S ufw logging on
sudo -S ufw enable

#-----------------------------------------------------------------------------------------------------
# INSTALLING FAIL2BAN
#-----------------------------------------------------------------------------------------------------

sudo -S apt -y install fail2ban
sudo -S systemctl enable fail2ban
sudo -S systemctl start fail2ban
sudo -S service sshd restart

#-----------------------------------------------------------------------------------------------------
# CREATING NEW USER ACCOUNT
#-----------------------------------------------------------------------------------------------------

printf "\n[******************** CREATING YOUR NEW USER ACCOUNT **********************]\n\n"

while [ : ]
do
	read -p "SET YOUR NEW SERVER USERNAME: " username

	USERNAME=$(echo $username | tr '[a-z]' '[A-Z]')

	if [[ "$username" = "${username%[[:space:]]*}" ]]
	then
		break
	else
		printf "\nERROR: $USERNAME SHOULDN'T CONTAIN ANY SPACES.\n\n"
		continue
	fi
done

sudo adduser $username
sudo usermod -aG sudo $username

#-----------------------------------------------------------------------------------------------------
# CREATING SSH KEYS FOR SERVER
#-----------------------------------------------------------------------------------------------------

printf "\n[********************* GENERATING YOUR NEW SSH KEYS ***********************]\n\n"
su $username -c ssh-keygen
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
sudo systemctl restart ssh

printf "\n[******************* TAKE NOTE OF YOUR SSH PRIVATE KEY *********************]\n\n"
sudo cat /home/$username/.ssh/id_rsa
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# COPYING SSH KEY OVER TO THE LOCAL HOST  
#-----------------------------------------------------------------------------------------------------

ssh_copy() {

sudo apt-get install sshpass -y
echo $SSH_CLIENT | awk '{ print $1}'
ip_ssh=$(echo $SSH_CLIENT | awk '{ print $1}')
echo "OK LET'S START COPYING OVER YOUR KEY FILES..."
printf "\n"
read -p "PLEASE ENTER YOUR LOCAL HOST PORT: " ssh_host_port
printf "\n"
read -p "PLEASE ENTER YOUR LOCAL HOST USERNAME: " ssh_host_user
printf "\n"
read -p "PLEASE ENTER YOUR LOCAL HOST PASSWORD: " ssh_host_password
printf "\n"
sudo sshpass -p $ssh_host_password ssh $ssh_host_user@$ip_ssh -p $ssh_host_port "mkdir -p ~/home/$ssh_host_user/.ssh"
sudo sshpass -p $ssh_host_password ssh-copy-id -i ~/home/$username/.ssh/id_rsa $ssh_host_user@$ip_ssh -p $ssh_host_port
printf "\n[********************************** DONE ***********************************]\n\n"

}

while [ : ]
do
        read -p "DO YOU WANT TO TRANSFER YOUR KEYS TO YOUR LOCAL HOST THROUGH SSH? [y/n]: " yn1
 
        case $yn1 in
                y|Y|yes|YES) echo ""
                             read -p "IS YOUR LOCAL HOST OPERATING ON LINUX OR MACOS? [y/n]: " linmac
			     if [[ "$linmac" == "y" ]]
			     then
				ssh_copy
                             	break
			     else
                                echo ""
				echo "SSH KEYS CAN ONLY BE COPIED TO A LINUX OR MAC OPERATING SYSTEM."
				echo ""
				read -p "Press [Enter] key to continue..."
				break
			     fi
			     ;;

                n|N|no|NO)   printf "\n[********************************** DONE ***********************************]\n\n"
                             break;;

                *)           echo -e "\nPLEASE ANSWER USING [y/n] or [Y/N]\n";;
        esac
done

#-----------------------------------------------------------------------------------------------------
# INSTALLING CANONICAL LIVEPATCH SERVICE
#-----------------------------------------------------------------------------------------------------

sudo snap install canonical-livepatch

#-----------------------------------------------------------------------------------------------------
# INSTALLING REM PROTOCOL BINARIES
#-----------------------------------------------------------------------------------------------------

wget https://github.com/Remmeauth/remprotocol/releases/download/0.2.1/remprotocol_0.2.1-1_amd64.deb && sudo apt install ./remprotocol_0.2.1-1_amd64.deb

#-----------------------------------------------------------------------------------------------------
# BOOTING REMNODE AND WALLET
#-----------------------------------------------------------------------------------------------------

wget https://testchain.remme.io/genesis.json

#-----------------------------------------------------------------------------------------------------
# CREATING A CONFIG AND DATA DIRECTORIES
#-----------------------------------------------------------------------------------------------------

mkdir data && mkdir config

#-----------------------------------------------------------------------------------------------------
# CONFIGURATION FILE (CONFIG/CONFIG.INI)
#-----------------------------------------------------------------------------------------------------

echo -e "plugin = eosio::chain_api_plugin\n\nplugin = eosio::net_api_plugin\n\nhttp-server-address = 0.0.0.0:8888\n\np2p-listen-endpoint = 0.0.0.0:9876\n\n# https://remme.io\n\np2p-peer-address = p2p.testchain.remme.io:2087\n\nverbose-http-errors = true\n\nchain-state-db-size-mb = 100480\n\nreversible-blocks-db-size-mb = 10480" > ./config/config.ini

#-----------------------------------------------------------------------------------------------------
# THE INITIAL RUN OF THE REMNODE
#-----------------------------------------------------------------------------------------------------

for ((i=1;i<=1;i++))
{
	remnode --config-dir /root/config/ --data-dir /root/data/ --delete-all-blocks --genesis-json /root/genesis.json 2>>/root/remnode.log &
	/usr/bin/nohup /usr/bin/remnode --config-dir /root/config/ --data-dir /root/data/ >>/root/remnode.log 2>>/root/remnode.log &
	read -p "Press [Enter] key to continue..."
	echo ""
	break
}

while [ : ]
do
	systemdt=$(date '+%Y-%m-%dT%H:%M')
	if [ "$dt1" == "$systemdt" ]; then
		break
	else
		dt1=$(remcli get info | grep head_block_time | cut -c 23-38)
		dt1date=$(echo $dt1 | awk -F'T' '{print $1}' | awk -F'-' 'BEGIN {OFS="-"}{ print $3, $2, $1}')
		dt1time=$(echo $dt1 | awk -F'T' '{print $2}' | awk -F':' 'BEGIN {OFS=":"}{ print $1, $2}')

		dt2=$(tail -n 1 remnode.log | awk '{print $2}'| awk -F'.' '{print $1}')
		dt2date=$(echo $dt2 | awk -F'T' '{print $1}' | awk -F'-' 'BEGIN {OFS="-"}{ print $3, $2, $1}')
		dt2time=$(echo $dt2 | awk -F'T' '{print $2}' | awk -F':' 'BEGIN {OFS=":"}{ print $1, $2}')

		echo "Fetching blocks for [${dt1date} | ${dt1time}] | Current block date [${dt2date} | ${dt2time}]"
	fi

	echo ""
	sleep 2
done

#-----------------------------------------------------------------------------------------------------
# RUNNING THE WALLET DAEMON
#-----------------------------------------------------------------------------------------------------

remvault &
sleep 2
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING THE REMCLI WALLET
#-----------------------------------------------------------------------------------------------------

remcli wallet create --file walletpass
walletpass=$(cat walletpass)
echo $walletpass > producerwalletpass.txt

#-----------------------------------------------------------------------------------------------------
# CHECKING FOR USERS REMNODE ACCOUNT
#-----------------------------------------------------------------------------------------------------

newaccount() {

printf "\n"
read -p "ENTER YOUR DOMAIN ADDRESS: " domain
echo $domain >> key1
printf "\n"

while [ : ]
do
          read -p "ENTER YOUR TELEGRAM PUBLIC KEY: " telegrampublickey

	  if [[ ! "$telegrampublickey" = "${telegrampublickey%[[:space:]]*}" ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#telegrampublickey} -ne 53 ]]; then
                printf "\nERROR: PUBLIC KEY SHOULD BE EXACTLY 53 CHARACTERS.\n\n"
                continue

	elif [[ "$telegrampublickey" =~ ['!@#$%^&*()_+'] ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "ENTER YOUR TELEGRAM PRIVATE KEY: " telegramprivatekey

	  if [[ ! "$telegramprivatekey" = "${telegramprivatekey%[[:space:]]*}" ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#telegramprivatekey} -ne 51 ]]; then
                printf "\nERROR: PRIVATE KEY SHOULD BE EXACTLY 51 CHARACTERS.\n\n"
                continue

	elif [[ "$telegramprivatekey" =~ ['!@#$%^&*()_+'] ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "ENTER YOUR TELEGRAM ACCOUNT NAME: " telegramaccountname

	  if [[ "$telegramaccountname" =~ [[:upper:]] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY CAPS.\n\n"
                continue

	elif [[ ! "$telegramaccountname" = "${telegramaccountname%[[:space:]]*}" ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${telegramaccountname//[a-z1-5]}" ]]; then
                printf "\nERROR: ACCOUNT NAME CAN ONLY HAVE [a-z] AND [1-5] CHARACTERS.\n\n"
                continue

        elif [[ ${#telegramaccountname} -ne 12 ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD BE EXACTLY 12 CHARACTERS.\n\n"
                continue

	elif [[ "$telegramaccountname" =~ ['!@#$%^&*()_+'] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "ENTER YOUR NEW OWNER ACCOUNT NAME: " owneraccountname

	  if [[ "$owneraccountname" =~ [[:upper:]] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY CAPS.\n\n"
                continue

	elif [[ ! "$owneraccountname" = "${owneraccountname%[[:space:]]*}" ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${owneraccountname//[a-z1-5]}" ]]; then
                printf "\nERROR: ACCOUNT NAME CAN ONLY HAVE [a-z] AND [1-5] CHARACTERS.\n\n"
                continue

        elif [[ ${#owneraccountname} -ne 12 ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD BE EXACTLY 12 CHARACTERS.\n\n"
                continue

	elif [[ "$owneraccountname" =~ ['!@#$%^&*()_+'] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"
remcli wallet import --private-key=$telegramprivatekey
printf "\n"
remcli create key --file key1
cp key1 ownerkeys
echo $owneraccountname >> key1
sudo -S sed -i "/^Private key: /s/Private key: //" key1 && sudo -S sed -i "/^Public key: /s/Public key: //" key1
ownerpublickey=$(head -n 2 key1 | tail -1)
ownerprivatekey=$(head -n 1 key1 | tail -1)
remcli wallet import --private-key=$ownerprivatekey
printf "\n[********************** TAKE NOTE OF YOUR OWNER KEYS ***********************]\n\n"
echo "Account Name:" $owneraccountname
cat ./ownerkeys
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n[******************** CREATING YOUR NEW OWNER ACCOUNT **********************]\n\n"
remcli system newaccount $telegramaccountname $owneraccountname $ownerpublickey $ownerpublickey -x 120 --transfer --stake "100.0000 REM" -p $telegramaccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"
remcli transfer $telegramaccountname $owneraccountname -x 120 "10000 REM" -p $telegramaccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"
remcli wallet remove_key $telegrampublickey --password=$walletpass

}

existingaccount() {

printf "\n"
read -p "ENTER YOUR DOMAIN ADDRESS: " domain
echo $domain >> key1
printf "\n"

while [ : ]
do
          read -p "ENTER YOUR OWNER PUBLIC KEY: " ownerpublickey

	  if [[ ! "$ownerpublickey" = "${ownerpublickey%[[:space:]]*}" ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#ownerpublickey} -ne 53 ]]; then
                printf "\nERROR: PUBLIC KEY SHOULD BE EXACTLY 53 CHARACTERS.\n\n"
                continue

	elif [[ "$ownerpublickey" =~ ['!@#$%^&*()_+'] ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

echo $ownerpublickey >> key1
printf "\n"

while [ : ]
do
          read -p "ENTER YOUR OWNER PRIVATE KEY: " ownerprivatekey

	  if [[ ! "$ownerprivatekey" = "${ownerprivatekey%[[:space:]]*}" ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#ownerprivatekey} -ne 51 ]]; then
                printf "\nERROR: PRIVATE KEY SHOULD BE EXACTLY 51 CHARACTERS.\n\n"
                continue

	elif [[ "$ownerprivatekey" =~ ['!@#$%^&*()_+'] ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

echo $ownerprivatekey >> key1
printf "\n"

while [ : ]
do
          read -p "ENTER YOUR OWNER ACCOUNT NAME: " owneraccountname

	  if [[ "$owneraccountname" =~ [[:upper:]] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY CAPS.\n\n"
                continue

	elif [[ ! "$owneraccountname" = "${owneraccountname%[[:space:]]*}" ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${owneraccountname//[a-z1-5]}" ]]; then
                printf "\nERROR: ACCOUNT NAME CAN ONLY HAVE [a-z] AND [1-5] CHARACTERS.\n\n"
                continue

        elif [[ ${#owneraccountname} -ne 12 ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD BE EXACTLY 12 CHARACTERS.\n\n"
                continue

	elif [[ "$owneraccountname" =~ ['!@#$%^&*()_+'] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

echo $owneraccountname >> key1
printf "\n"
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$ownerprivatekey

}

printf "\n"

while [ : ]
do
	read -p "DO YOU WANT TO CREATE A NEW OWNER ACCOUNT? [y/n]: " yn2

  	case $yn2 in
       		y|Y|yes|YES) newaccount
	     		     break;;

       		n|N|no|NO)   existingaccount
       	     		     break;;

       		*)   	     echo -e "\nPLEASE ANSWER USING [y/n] or [Y/N]\n";;
  	esac
done
  
#-----------------------------------------------------------------------------------------------------
# YOUR REMNODE WALLET PASSWORD
#-----------------------------------------------------------------------------------------------------

printf "\n[******************* TAKE NOTE OF YOUR WALLET PASSWORD *********************]\n\n"
cat ./walletpass
printf "\n"
echo " "
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# IMPORTING EXISTING KEY PERMISSIONS
#-----------------------------------------------------------------------------------------------------

oldkeypermissions() {

read -p "ENTER YOUR REQUEST PUBLIC KEY: " requestpublickey
printf "\n"
read -p "ENTER YOUR REQUEST PRIVATE KEY: " requestprivatekey
printf "\n"
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$requestprivatekey
printf "\n"
read -p "ENTER YOUR TRANSFER PRIVATE KEY: " transferprivatekey
printf "\n"
remcli wallet import --private-key=$transferprivatekey
printf "\n"
echo -e "plugin = eosio::chain_api_plugin\n\nplugin = eosio::net_api_plugin\n\nhttp-server-address = 0.0.0.0:8888\n\np2p-listen-endpoint = 0.0.0.0:9876\n\n# https://remme.io\n\np2p-peer-address = p2p.testchain.remme.io:2087\n\n# https://eon.llc\n\np2p-peer-address = 3.227.137.101:9877\n\n# https://remblock.pro\n\np2p-peer-address = 95.179.237.207:9877\n\np2p-peer-address = 45.77.59.14:9877\n\np2p-peer-address = 45.77.227.198:9877\n\np2p-peer-address = 45.77.56.243:9877\n\n# https://testnet.geordier.co.uk\n\np2p-peer-address = 45.76.132.248:9877\n\nverbose-http-errors = true\n\nchain-state-db-size-mb = 100480\n\nreversible-blocks-db-size-mb = 10480\n\nplugin = eosio::producer_plugin\n\nplugin = eosio::producer_api_plugin\n\nproducer-name = $owneraccountname\n\nsignature-provider = $requestpublickey=KEY:$requestprivatekey" > ./config/config.ini
printf "\n"
remcli system regproducer $owneraccountname $requestpublickey $domain
remcli system voteproducer prods $owneraccountname $owneraccountname -p $owneraccountname@vote
printf "\n"
remcli wallet remove_key $ownerpublickey --password=$walletpass
printf "\n"
rm test2.sh walletpass producerwalletpass.txt
printf "\n[******************************* COMPLETED *********************************]\n\n"

}

#-----------------------------------------------------------------------------------------------------
# GENERATING RANDOM ACTIVE ACCOUNT NAMES
#-----------------------------------------------------------------------------------------------------

newkeypermissions() {

owneraccountname=$(head -n 3 key1 | tail -1)
activeproducername1=a$(cat /dev/urandom | tr -dc 'a-z1-5' | fold -w 11 | head -n 1 |  grep -o . | sort |tr -d "\n")
activeproducername2=b$(cat /dev/urandom | tr -dc 'a-z1-5' | fold -w 11 | head -n 1 |  grep -o . | sort |tr -d "\n")
activeproducername3=c$(cat /dev/urandom | tr -dc 'a-z1-5' | fold -w 11 | head -n 1 |  grep -o . | sort |tr -d "\n")

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE KEY 1
#-----------------------------------------------------------------------------------------------------

remcli create key --file key2
cp key2 activekeys1
sudo -S sed -i "/^Private key: /s/Private key: //" key2 && sudo -S sed -i "/^Public key: /s/Public key: //" key2
activepublickey1=$(head -n 2 key2 | tail -1)
activeprivatekey1=$(head -n 1 key2 | tail -1)
remcli wallet import --private-key=$activeprivatekey1
printf "\n[********************* TAKE NOTE OF YOUR ACTIVE KEY 1 **********************]\n\n"
echo "Account Name:" $activeproducername1
cat ./activekeys1
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE KEY 2
#-----------------------------------------------------------------------------------------------------

remcli create key --file key3
cp key3 activekeys2
sudo -S sed -i "/^Private key: /s/Private key: //" key3 && sudo -S sed -i "/^Public key: /s/Public key: //" key3
activepublickey2=$(head -n 2 key3 | tail -1)
activeprivatekey2=$(head -n 1 key3 | tail -1)
remcli wallet import --private-key=$activeprivatekey2
printf "\n[********************* TAKE NOTE OF YOUR ACTIVE KEY 2 **********************]\n\n"
echo "Account Name:" $activeproducername2
cat ./activekeys2
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE KEY 3
#-----------------------------------------------------------------------------------------------------

remcli create key --file key4
cp key4 activekeys3
sudo -S sed -i "/^Private key: /s/Private key: //" key4 && sudo -S sed -i "/^Public key: /s/Public key: //" key4
activepublickey3=$(head -n 2 key4 | tail -1)
activeprivatekey3=$(head -n 1 key4 | tail -1)
remcli wallet import --private-key=$activeprivatekey3
printf "\n[********************* TAKE NOTE OF YOUR ACTIVE KEY 3 **********************]\n\n"
echo "Account Name:" $activeproducername3
cat ./activekeys3
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE REQUEST KEY
#-----------------------------------------------------------------------------------------------------

remcli create key --file key5
cp key5 requestkeys
sudo -S sed -i "/^Private key: /s/Private key: //" key5 && sudo -S sed -i "/^Public key: /s/Public key: //" key5
requestpublickey=$(head -n 2 key5 | tail -1)
requestprivatekey=$(head -n 1 key5 | tail -1)
remcli wallet import --private-key=$requestprivatekey
echo -e "plugin = eosio::chain_api_plugin\n\nplugin = eosio::net_api_plugin\n\nhttp-server-address = 0.0.0.0:8888\n\np2p-listen-endpoint = 0.0.0.0:9876\n\n# https://remme.io\n\np2p-peer-address = p2p.testchain.remme.io:2087\n\n# https://eon.llc\n\np2p-peer-address = 3.227.137.101:9877\n\n# https://remblock.pro\n\np2p-peer-address = 95.179.237.207:9877\n\np2p-peer-address = 45.77.59.14:9877\n\np2p-peer-address = 45.77.227.198:9877\n\np2p-peer-address = 45.77.56.243:9877\n\n# https://testnet.geordier.co.uk\n\np2p-peer-address = 45.76.132.248:9877\n\nverbose-http-errors = true\n\nchain-state-db-size-mb = 100480\n\nreversible-blocks-db-size-mb = 10480\n\nplugin = eosio::producer_plugin\n\nplugin = eosio::producer_api_plugin\n\nproducer-name = $owneraccountname\n\nsignature-provider = $requestpublickey=KEY:$requestprivatekey" > ./config/config.ini
printf "\n[********************* TAKE NOTE OF YOUR REQUEST KEYS **********************]\n\n"
cat ./requestkeys
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE TRANSFER KEY
#-----------------------------------------------------------------------------------------------------

remcli create key --file key6
cp key6 transferkeys
sudo -S sed -i "/^Private key: /s/Private key: //" key6 && sudo -S sed -i "/^Public key: /s/Public key: //" key6
transferprivatekey=$(head -n 1 key6 | tail -1)
remcli wallet import --private-key=$transferprivatekey
printf "\n[******************** TAKE NOTE OF YOUR TRANSFER KEYS **********************]\n\n"
cat ./transferkeys
printf "\n"
read -p 'Press [Enter] key to continue...'

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMCHAIN ACCOUNTS
#-----------------------------------------------------------------------------------------------------

printf "\n[*********************** CREATING ACTIVE ACCOUNT 1 *************************]\n\n"
remcli system newaccount $owneraccountname $activeproducername1 $activepublickey1 $activepublickey1 -x 120 --transfer --stake "100.0000 REM" -p $owneraccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n[*********************** CREATING ACTIVE ACCOUNT 2 *************************]\n\n"
remcli system newaccount $owneraccountname $activeproducername2 $activepublickey2 $activepublickey2 -x 120 --transfer --stake "100.0000 REM" -p $owneraccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n[*********************** CREATING ACTIVE ACCOUNT 3 *************************]\n\n"
remcli system newaccount $owneraccountname $activeproducername3 $activepublickey3 $activepublickey3 -x 120 --transfer --stake "100.0000 REM" -p $owneraccountname@owner

#-----------------------------------------------------------------------------------------------------
# WAITING 2 MINUTES FOR TRANSCATION CONFIRMATION
#-----------------------------------------------------------------------------------------------------

DELAY=160
ELAPSED=0
REMAINING=0
CTR=0
STEP=3

printf "\n"

while [[ "${DELAY}" -ge "${ELAPSED}" ]]
do
	CTR=$(($CTR+1))
	REMAINING=$(($DELAY - $ELAPSED))
	MINS=$(($REMAINING/60))
	SECS=$(($REMAINING - ($MINS*60)))
	STEPSECS=$(($SECS - $STEP))

	if [[ ! $STEPSECS -ge 0 ]]
	then
		STEPSECS=0
	fi

	echo -ne " | Please wait for $MINS minutes $STEPSECS seconds ...\033[0K\r"

	for ((I=1;I<=$CTR;I++))
	do
		echo -ne ">"
	done
       
        sleep $STEP 
	ELAPSED=$(($ELAPSED + $STEP))
done

printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR MULTISIG PERMISSIONS
#-----------------------------------------------------------------------------------------------------

printf "\n[************************ CREATING ACTIVE MULTISIG *************************]\n\n"
remcli set account permission $owneraccountname active '{"threshold":2,"keys":[],"accounts":[{"permission":{"actor":"'$activeproducername1'","permission":"active"},"weight":1},{"permission":{"actor":"'$activeproducername2'","permission":"active"},"weight":1},{"permission":{"actor":"'$activeproducername3'","permission":"active"},"weight":1}],"waits":[]}' owner -p $owneraccountname@owner
printf "\n[******************************* COMPLETED *********************************]\n\n"

}

#-----------------------------------------------------------------------------------------------------
# REGISTERING AS NEW BLOCK PRODUCER 
#-----------------------------------------------------------------------------------------------------

setupblockproducer() {

remcli system regproducer $owneraccountname $requestpublickey $domain
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMCHAIN ACCOUNT PERMISSIONS 
#-----------------------------------------------------------------------------------------------------

setupkeypermissions() {

remcli set account permission $owneraccountname safemode $ownerpublickey owner -p $owneraccountname@owner
remcli set account permission $owneraccountname vote $requestpublickey active -p $owneraccountname@active
remcli set account permission $owneraccountname claim $requestpublickey active -p $owneraccountname@active
remcli set account permission $owneraccountname stake $requestpublickey active -p $owneraccountname@active
remcli set account permission $owneraccountname transfer $transferpublickey active -p $owneraccountname@active
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# CREATING REMCHAIN KEY PERMISSIONS 
#-----------------------------------------------------------------------------------------------------

createkeypermissions() {

remcli set action permission $owneraccountname rem regproducer safemode -p $owneraccountname@owner
remcli set action permission $owneraccountname rem unregprod safemode -p $owneraccountname@owner
remcli set action permission $owneraccountname rem voteproducer vote -p $owneraccountname@active
remcli set action permission $owneraccountname rem claimrewards claim -p $owneraccountname@active
remcli set action permission $owneraccountname rem delegatebw stake -p $owneraccountname@active
remcli set action permission $owneraccountname rem.token transfer transfer -p $owneraccountname@active
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# CASTING YOUR VOTES TO YOURSELF
#-----------------------------------------------------------------------------------------------------

finalisingproducer() {

remcli system voteproducer prods $owneraccountname $owneraccountname -p $owneraccountname@vote
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# REMOVING OWNER AND ACTIVE KEYS
#-----------------------------------------------------------------------------------------------------

remcli wallet remove_key $ownerpublickey --password=$walletpass
remcli wallet remove_key $activepublickey1 --password=$walletpass
remcli wallet remove_key $activepublickey2 --password=$walletpass
remcli wallet remove_key $activepublickey3 --password=$walletpass
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# REBOOTING REMNODE AND FIXING ANY PROBLEMS
#-----------------------------------------------------------------------------------------------------

sudo killall remnode
sudo remnode --config-dir ./config/ --data-dir ./data/ --fix-reversible-blocks --force-all-checks --genesis-json genesis.json
sudo remnode --config-dir ./config/ --data-dir ./data/ >> remnode.log 2>&1 &

#-----------------------------------------------------------------------------------------------------
# REMOVING FILES WHICH AINT REQUIRED ANYMORE
#-----------------------------------------------------------------------------------------------------

rm key1 key2 key3 key4 key5 test2.sh activekeys1 activekeys2 activekeys3 walletpass requestkeys transferkeys domain.txt ownerpublickey.txt owneraccountname.txt activeproducername.txt producerwalletpass.txt

printf "\n[******************************* COMPLETED *********************************]\n\n"

}

#-----------------------------------------------------------------------------------------------------
# CHECKING FOR EXISTING KEY PERMISSIONS
#-----------------------------------------------------------------------------------------------------

while [ : ]
do
	read -p "DO YOU HAVE EXISTING KEY PERMISSIONS? [y/n]: " yn3

  	case $yn3 in
       		y|Y|yes|YES) oldkeypermissions
	     		     break;;

       		n|N|no|NO)   newkeypermissions
                             setupblockproducer
                             setupkeypermissions
                             createkeypermissions
                             finalisingproducer
       	     		     break;;

       		*)   	     echo -e "\nPLEASE ANSWER USING [y/n] or [Y/N]\n";;
  	esac
done
