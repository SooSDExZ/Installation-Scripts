#!/bin/bash

#----------------------------------------------------------------------------------------------------#
# IF THE USER HAS NO ROOT PERMISSIONS THE SCRIPT WILL EXIT                                           #
#----------------------------------------------------------------------------------------------------#

if (($EUID!=0))
then
  echo "You must be root to run this script" 2>&1
  exit 1
fi

#----------------------------------------------------------------------------------------------------#
# INSTALLING REM PROTOCOL BINARIES                                                                   #
#----------------------------------------------------------------------------------------------------#

wget https://raw.githubusercontent.com/remblock/REMChain-Scripts/master/remprotocol
chmod +x remprotocol
sudo ./remprotocol

#----------------------------------------------------------------------------------------------------#
# BOOTING REMNODE AND WALLET                                                                         #
#----------------------------------------------------------------------------------------------------#

wget https://remchain.remme.io/genesis.json

#----------------------------------------------------------------------------------------------------#
# CREATING A CONFIG AND DATA DIRECTORIES                                                             #
#----------------------------------------------------------------------------------------------------#

mkdir data && mkdir config

#----------------------------------------------------------------------------------------------------#
# CONFIGURATION FILE (CONFIG/CONFIG.INI)                                                             #
#----------------------------------------------------------------------------------------------------#

echo -e "plugin = eosio::chain_api_plugin\n\nplugin = eosio::net_api_plugin\n\nhttp-server-address = 0.0.0.0:8888\n\np2p-listen-endpoint = 0.0.0.0:9876\n\n# https://remme.io\n\np2p-peer-address = p2p.remchain.remme.io:2087\n\nverbose-http-errors = true\n\nchain-state-db-size-mb = 100480\n\nreversible-blocks-db-size-mb = 10480" > ./config/config.ini

#----------------------------------------------------------------------------------------------------#
# RESTORE FROM SNAPSHOT                                                                              #
#----------------------------------------------------------------------------------------------------#

sudo wget https://github.com/remblock/REMChain-Remote-Snapshots/raw/master/setup-remote-snapshot 
sudo chmod u+x setup-remote-snapshot 
sudo ./setup-remote-snapshot
cd data
cd snapshots
sudo ./restore-remote-snapshot
sleep 4

while [ : ]
do

systemdt=$(date '+%Y-%m-%dT%H:%M')

if [ "$dt1" == "$systemdt" ]
then
  break
else
  dt1=$(remcli get info | grep head_block_time | cut -c 23-38)
  dt1date=$(echo $dt1 | awk -F'T' '{print $1}' | awk -F'-' 'BEGIN {OFS="-"}{ print $3, $2, $1}')
  dt1time=$(echo $dt1 | awk -F'T' '{print $2}' | awk -F':' 'BEGIN {OFS=":"}{ print $1, $2}')
  dt2=$(tail -n 1 $remnode_log_file | awk '{print $2}'| awk -F'.' '{print $1}')
  dt2date=$(echo $dt2 | awk -F'T' '{print $1}' | awk -F'-' 'BEGIN {OFS="-"}{ print $3, $2, $1}')
  dt2time=$(echo $dt2 | awk -F'T' '{print $2}' | awk -F':' 'BEGIN {OFS=":"}{ print $1, $2}')

  echo "Fetching blocks for [${dt1date} | ${dt1time}] | Current block date [${dt2date} | ${dt2time}]"
fi

echo ""
sleep 2

done

#----------------------------------------------------------------------------------------------------#
# UPDATING AND UPGRADING PACKAGE DATABASE                                                            #
#----------------------------------------------------------------------------------------------------#

sudo -S apt update && sudo -S apt upgrade -y
echo ""

#----------------------------------------------------------------------------------------------------#
# CHANGING DEFAULT SSH PORT NUMBER                                                                   #
#----------------------------------------------------------------------------------------------------#

while [ : ]
do

	 read -p "PLEASE ENTER A RANDOM 5 DIGIT PORT NUMBER: " portnumber

         if [[ ${#portnumber} -ne 5 ]]
         then
                 printf "\nERROR: PORT NUMBER SHOULD BE EXACTLY 5 DIGITS.\n\n"
                 continue
         elif [[ ! -z "${portnumber//[0-9]}" ]]
         then
                 printf "\nERROR: PORT NUMBER SHOULD CONTAIN NUMBERS ONLY.\n\n"
                 continue
         else
                 sudo -S sed -i "/^#Port 22/s/#Port 22/Port $portnumber/" /etc/ssh/sshd_config && sed -i '/^PermitRootLogin/s/yes/without-password/' /etc/ssh/sshd_config && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
		 break
         fi
done

#----------------------------------------------------------------------------------------------------#
# INSTALLING UNCOMPLICATED FIREWALL                                                                  #
#----------------------------------------------------------------------------------------------------#

sudo -S apt-get install ufw -y
sudo -S ufw allow ssh/tcp
sudo -S ufw limit ssh/tcp
sudo -S ufw allow $portnumber/tcp
sudo -S ufw allow 8888/tcp
sudo -S ufw allow 9876/tcp
sudo -S ufw logging on
sudo -S ufw enable

#----------------------------------------------------------------------------------------------------#
# INSTALLING FAIL2BAN                                                                                #
#----------------------------------------------------------------------------------------------------#

sudo -S apt -y install fail2ban
sudo -S systemctl enable fail2ban
sudo -S systemctl start fail2ban
sudo -S service sshd restart

#----------------------------------------------------------------------------------------------------#
# INSTALLING CANONICAL LIVEPATCH SERVICE                                                             #
#----------------------------------------------------------------------------------------------------#

sudo snap install canonical-livepatch

#----------------------------------------------------------------------------------------------------#
# READJUST CONFIG.INI FILE                                                                           #
#----------------------------------------------------------------------------------------------------#

rm /root/config/config.ini
wget https://github.com/remblock/REMChain-Mainnet-Setup/raw/master/config.ini
cat /root/config.ini >> /root/config/config.ini
rm /root/config.ini

#----------------------------------------------------------------------------------------------------#
# RUNNING THE WALLET DAEMON                                                                          #
#----------------------------------------------------------------------------------------------------#

remvault &
sleep 2

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n\n"

#----------------------------------------------------------------------------------------------------#
# CREATING THE REMCLI WALLET                                                                         #
#----------------------------------------------------------------------------------------------------#

remcli wallet create --file walletpass
walletpass=$(cat walletpass)
echo $walletpass > producerwalletpass

printf "\n\n"

#----------------------------------------------------------------------------------------------------#
# SETUP GRACEFUL SHUTDOWN                                                                            #
#----------------------------------------------------------------------------------------------------#

echo '#!/bin/sh
remnode_pid=$(pgrep remnode)
if [ ! -z "$remnode_pid" ]; then
if ps -p $remnode_pid > /dev/null; then
kill -SIGINT $remnode_pid
fi
while ps -p $remnode_pid > /dev/null; do
sleep 1
done
fi
' > /root/node_shutdown.sh
echo '[Unit]
Description=Gracefully shut down remnode to avoid database dirty flag
DefaultDependencies=no
After=poweroff.target shutdown.target reboot.target halt.target kexec.target
Requires=network-online.target network.target
[Service]
Type=oneshot
ExecStop=/root/node_shutdown.sh
RemainAfterExit=yes
KillMode=none
[Install]
WantedBy=multi-user.target' > /etc/systemd/system/node_shutdown.service
sudo chmod +x /root/node_shutdown.sh
systemctl daemon-reload
systemctl enable node_shutdown
systemctl restart node_shutdown

#----------------------------------------------------------------------------------------------------#
# RESTART ALL PROCESSES ON REBOOT                                                                    #
#----------------------------------------------------------------------------------------------------#

echo '#!/bin/bash
sudo resize2fs /dev/nvme1n1
sudo remnode --config-dir /root/config/ --data-dir /root/data/ >> /root/remnode.log 2>&1 &
exit 0' > /etc/rc.local
sudo chmod +x /etc/rc.local
echo ""
echo "==============================="
echo "REMBLOCK-PRODUCER HAS COMPLETED"
echo "==============================="
echo ""
