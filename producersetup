#!/usr/bin/env bash

#****************************************************************************************************#
#                                    REMCHAIN-PRODUCER-SETUP                                         #
#****************************************************************************************************#

#-----------------------------------------------------------------------------------------------------
# CHECKING FOR REMNODE USER ACCOUNT
#-----------------------------------------------------------------------------------------------------

newaccount() {

printf "\n"
read -p "PLEASE ENTER YOUR DOMAIN ADDRESS: " domain
printf "\n"

read -p "PLEASE ENTER YOUR ETHEREUM NODE ADDRESS: " ethnodeaddress
printf "\n"

read -p "PLEASE ENTER YOUR CRYPTOCOMPARE API KEY: " cryptocomparekey
printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR EXISTING OWNER PUBLIC KEY: " telegrampublickey

	  if [[ ! "$telegrampublickey" = "${telegrampublickey%[[:space:]]*}" ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#telegrampublickey} -ne 53 ]]; then
                printf "\nERROR: PUBLIC KEY SHOULD ONLY BE 53 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$telegrampublickey" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR EXISTING OWNER PRIVATE KEY: " telegramprivatekey

	  if [[ ! "$telegramprivatekey" = "${telegramprivatekey%[[:space:]]*}" ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#telegramprivatekey} -ne 51 ]]; then
                printf "\nERROR: PRIVATE KEY SHOULD ONLY BE 51 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$telegramprivatekey" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR EXISTING ACCOUNT NAME: " telegramaccountname

	  if [[ "$telegramaccountname" =~ [[:upper:]] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY CAPS.\n\n"
                continue

	elif [[ ! "$telegramaccountname" = "${telegramaccountname%[[:space:]]*}" ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${telegramaccountname//[a-z1-5]}" ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD ONLY HAVE CHARACTERS BETWEEN [a-z] AND [1-5].\n\n"
                continue

        elif [[ ${#telegramaccountname} -ne 12 ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD ONLY BE 12 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$telegramaccountname" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR NEW PRODUCER ACCOUNT NAME: " owneraccountname

	  if [[ "$owneraccountname" =~ [[:upper:]] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY CAPS.\n\n"
                continue

	elif [[ ! "$owneraccountname" = "${owneraccountname%[[:space:]]*}" ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${owneraccountname//[a-z1-5]}" ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD ONLY HAVE CHARACTERS BETWEEN [a-z] AND [1-5].\n\n"
                continue

        elif [[ ${#owneraccountname} -ne 12 ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD ONLY BE 12 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$owneraccountname" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p " PLEASE ENTER THE AMOUNT TO TRANSFER TO YOUR NEW PRODUCER ACCOUNT: " ownertransferamount

	  if [[ $ownertransferamount -lt 5000 ]]; then
		printf "\nERROR: TRANSFER AMOUNT SHOULDN'T BE LESS THEN 5000 REM.\n\n"
                continue

	elif [[ ! "$ownertransferamount" = "${ownertransferamount%[[:space:]]*}" ]]; then
		printf "\nERROR: TRANSFER AMOUNT SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${ownertransferamount//[0-9]}" ]]; then
                printf "\nERROR: TRANSFER AMOUNT SHOULD ONLY CONTAIN CHARACTERS BETWEEN [0-9].\n\n"
                continue

	elif [[ "$ownertransferamount" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: TRANSFER AMOUNT SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

#-----------------------------------------------------------------------------------------------------

printf "\n\n"
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$telegramprivatekey
printf "\n"
remcli create key --file key1
cp key1 ownerkeys
echo $owneraccountname >> key1
sudo -S sed -i "/^Private key: /s/Private key: //" key1 && sudo -S sed -i "/^Public key: /s/Public key: //" key1
ownerpublickey=$(head -n 2 key1 | tail -1)
ownerprivatekey=$(head -n 1 key1 | tail -1)
remcli wallet import --private-key=$ownerprivatekey

printf "\n\n[********************* TAKE NOTE OF YOUR OWNER KEYS **********************]\n\n"

echo "Account Name:" $owneraccountname
cat ./ownerkeys
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

printf "\n[******************* CREATING YOUR NEW PRODUCER ACCOUNT ********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system newaccount $telegramaccountname $owneraccountname $ownerpublickey $ownerpublickey -x 120 --transfer --stake "1000.0000 REM" -p $telegramaccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

printf "\n[******************* TRANSFERING TO NEW PRODUCER ACCOUNT *******************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli transfer $telegramaccountname $owneraccountname -x 120 "$ownertransferamount REM" -p $telegramaccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'

rm ownerkeys
remcli wallet remove_key $telegrampublickey --password=$walletpass > /dev/null 2>&1

}

#-----------------------------------------------------------------------------------------------------

existingaccount() {

printf "\n"
read -p "PLEASE ENTER YOUR DOMAIN ADDRESS: " domain
printf "\n"

read -p "PLEASE ENTER YOUR ETHEREUM NODE ADDRESS: " ethnodeaddress
printf "\n"

read -p "PLEASE ENTER YOUR CRYPTOCOMPARE API KEY: " cryptocomparekey
printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR OWNER PUBLIC KEY: " ownerpublickey

	  if [[ ! "$ownerpublickey" = "${ownerpublickey%[[:space:]]*}" ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#ownerpublickey} -ne 53 ]]; then
                printf "\nERROR: PUBLIC KEY SHOULD ONLY BE 53 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$ownerpublickey" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

echo $ownerpublickey >> key1
printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR OWNER PRIVATE KEY: " ownerprivatekey

	  if [[ ! "$ownerprivatekey" = "${ownerprivatekey%[[:space:]]*}" ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#ownerprivatekey} -ne 51 ]]; then
                printf "\nERROR: PRIVATE KEY SHOULD ONLY BE 51 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$ownerprivatekey" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

echo $ownerprivatekey >> key1
printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR PRODUCER ACCOUNT NAME: " owneraccountname

	  if [[ "$owneraccountname" =~ [[:upper:]] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY CAPS.\n\n"
                continue

	elif [[ ! "$owneraccountname" = "${owneraccountname%[[:space:]]*}" ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${owneraccountname//[a-z1-5]}" ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD ONLY HAVE CHARACTERS BETWEEN [a-z] AND [1-5].\n\n"
                continue

        elif [[ ${#owneraccountname} -ne 12 ]]; then
                printf "\nERROR: ACCOUNT NAME SHOULD ONLY BE 12 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$owneraccountname" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: ACCOUNT NAME SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

echo $owneraccountname >> key1
printf "\n\n"
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$ownerprivatekey

printf "\n\n"

}

#-----------------------------------------------------------------------------------------------------
# IMPORTING EXISTING KEY PERMISSIONS
#-----------------------------------------------------------------------------------------------------

oldkeypermissions() {

printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR PRODUCER PUBLIC KEY: " producerpublickey

	  if [[ ! "$producerpublickey" = "${producerpublickey%[[:space:]]*}" ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#producerpublickey} -ne 53 ]]; then
                printf "\nERROR: PUBLIC KEY SHOULD ONLY BE 53 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$producerpublickey" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: PUBLIC KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR PRODUCER PRIVATE KEY: " producerprivatekey

	  if [[ ! "$producerprivatekey" = "${producerprivatekey%[[:space:]]*}" ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#producerprivatekey} -ne 51 ]]; then
                printf "\nERROR: PRIVATE KEY SHOULD ONLY BE 51 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$producerprivatekey" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n"

while [ : ]
do
          read -p "PLEASE ENTER YOUR TRANSFER PRIVATE KEY: " transferprivatekey

	  if [[ ! "$transferprivatekey" = "${transferprivatekey%[[:space:]]*}" ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ ${#transferprivatekey} -ne 51 ]]; then
                printf "\nERROR: PRIVATE KEY SHOULD ONLY BE 51 CHARACTERS LONG.\n\n"
                continue

	elif [[ "$transferprivatekey" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: PRIVATE KEY SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

printf "\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$producerprivatekey

printf "\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$transferprivatekey
echo -e "\nplugin = eosio::producer_plugin\n\nplugin = eosio::producer_api_plugin\n\nproducer-name = $owneraccountname\n\nsignature-provider = $producerpublickey=KEY:$producerprivatekey" >> ./config/config.ini

printf "\n"

printf "\n[******************** REGISTERING AS A BLOCK PRODUCER **********************]\n\n"

remcli system regproducer $owneraccountname $producerpublickey $domain -p $owneraccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

printf "\n[********************* CASTING VOTE TO BLOCK PRODUCER **********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system voteproducer prods $owneraccountname $owneraccountname -p $owneraccountname@producer
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

printf "\n[************************* REMOVING YOUR OWNER KEY *************************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet remove_key $ownerpublickey --password=$walletpass
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# REBOOTING REMNODE AND FIXING ANY PROBLEMS
#-----------------------------------------------------------------------------------------------------

sudo killall remnode
sudo remnode --config-dir ./config/ --data-dir ./data/ --fix-reversible-blocks --force-all-checks --genesis-json genesis.json
sudo remnode --config-dir ./config/ --data-dir ./data/ >> remnode.log 2>&1 &

#-----------------------------------------------------------------------------------------------------
# ADDING SWAP AND ORACLE PLUGINS TO CONFIG.INI
#-----------------------------------------------------------------------------------------------------

echo -e "\nplugin = eosio::eth_swap_plugin\n\nswap-authority =$owneraccountname@producer\n\nswap-signing-key =$producerprivatekey\n\neth-wss-provider =$ethnodeaddress\n\nplugin = eosio::rem_oracle_plugin\n\ncryptocompare-apikey =$cryptocomparekey\n\noracle-authority =$owneraccountname@producer\n\noracle-signing-key =$producerprivatekey" >> ./config/config.ini

#-----------------------------------------------------------------------------------------------------
# REMOVING FILES WHICH AINT REQUIRED ANYMORE
#-----------------------------------------------------------------------------------------------------

rm key1 walletpass producersetup producerwalletpass

printf "\n\n[******************************* COMPLETED *********************************]\n\n\n"

}

#-----------------------------------------------------------------------------------------------------
# GENERATING RANDOM ACTIVE ACCOUNT NAMES
#-----------------------------------------------------------------------------------------------------

newkeypermissions() {

owneraccountname=$(head -n 3 key1 | tail -1)
activeproducername1=a$(cat /dev/urandom | tr -dc 'a-z1-5' | fold -w 11 | head -n 1 |  grep -o . | sort |tr -d "\n")
activeproducername2=b$(cat /dev/urandom | tr -dc 'a-z1-5' | fold -w 11 | head -n 1 |  grep -o . | sort |tr -d "\n")
activeproducername3=c$(cat /dev/urandom | tr -dc 'a-z1-5' | fold -w 11 | head -n 1 |  grep -o . | sort |tr -d "\n")
activeproducername4=d$(cat /dev/urandom | tr -dc 'a-z1-5' | fold -w 11 | head -n 1 |  grep -o . | sort |tr -d "\n")

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE KEY 1
#-----------------------------------------------------------------------------------------------------

printf "\n\n"

remcli create key --file key2
cp key2 activekeys1
sudo -S sed -i "/^Private key: /s/Private key: //" key2 && sudo -S sed -i "/^Public key: /s/Public key: //" key2
activepublickey1=$(head -n 2 key2 | tail -1)
activeprivatekey1=$(head -n 1 key2 | tail -1)
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$activeprivatekey1

printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE KEY 2
#-----------------------------------------------------------------------------------------------------

remcli create key --file key3
cp key3 activekeys2
sudo -S sed -i "/^Private key: /s/Private key: //" key3 && sudo -S sed -i "/^Public key: /s/Public key: //" key3
activepublickey2=$(head -n 2 key3 | tail -1)
activeprivatekey2=$(head -n 1 key3 | tail -1)
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$activeprivatekey2

printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE KEY 3
#-----------------------------------------------------------------------------------------------------

remcli create key --file key4
cp key4 activekeys3
sudo -S sed -i "/^Private key: /s/Private key: //" key4 && sudo -S sed -i "/^Public key: /s/Public key: //" key4
activepublickey3=$(head -n 2 key4 | tail -1)
activeprivatekey3=$(head -n 1 key4 | tail -1)
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$activeprivatekey3

printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE KEY 4
#-----------------------------------------------------------------------------------------------------

remcli create key --file key5
cp key5 activekeys4
sudo -S sed -i "/^Private key: /s/Private key: //" key5 && sudo -S sed -i "/^Public key: /s/Public key: //" key5
activepublickey4=$(head -n 2 key5 | tail -1)
activeprivatekey4=$(head -n 1 key5 | tail -1)
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$activeprivatekey4

printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE PRODUCER KEY
#-----------------------------------------------------------------------------------------------------

remcli create key --file key6
cp key6 producerkeys
sudo -S sed -i "/^Private key: /s/Private key: //" key6 && sudo -S sed -i "/^Public key: /s/Public key: //" key6
producerpublickey=$(head -n 2 key6 | tail -1)
producerprivatekey=$(head -n 1 key6 | tail -1)
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$producerprivatekey
echo -e "\nplugin = eosio::producer_plugin\n\nplugin = eosio::producer_api_plugin\n\nproducer-name = $owneraccountname\n\nsignature-provider = $producerpublickey=KEY:$producerprivatekey" >> ./config/config.ini

printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE TRANSFER KEY
#-----------------------------------------------------------------------------------------------------

remcli create key --file key7
cp key7 transferkeys
sudo -S sed -i "/^Private key: /s/Private key: //" key7 && sudo -S sed -i "/^Public key: /s/Public key: //" key7
transferpublickey=$(head -n 2 key7 | tail -1)
transferprivatekey=$(head -n 1 key7 | tail -1)
remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet import --private-key=$transferprivatekey

printf "\n"

#-----------------------------------------------------------------------------------------------------
# DISPLAYING YOUR REMNODE ACTIVE KEY 1
#-----------------------------------------------------------------------------------------------------

printf "\n[********************* TAKE NOTE OF YOUR ACTIVE KEY 1 **********************]\n\n"
echo "Account Name:" $activeproducername1
cat ./activekeys1
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# DISPLAYING YOUR REMNODE ACTIVE KEY 2
#-----------------------------------------------------------------------------------------------------

printf "\n[********************* TAKE NOTE OF YOUR ACTIVE KEY 2 **********************]\n\n"
echo "Account Name:" $activeproducername2
cat ./activekeys2
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# DISPLAYING YOUR REMNODE ACTIVE KEY 3
#-----------------------------------------------------------------------------------------------------

printf "\n[********************* TAKE NOTE OF YOUR ACTIVE KEY 3 **********************]\n\n"
echo "Account Name:" $activeproducername3
cat ./activekeys3
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# DISPLAYING YOUR REMNODE ACTIVE KEY 4
#-----------------------------------------------------------------------------------------------------

printf "\n[********************* TAKE NOTE OF YOUR ACTIVE KEY 4 **********************]\n\n"
echo "Account Name:" $activeproducername4
cat ./activekeys4
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# DISPLAYING YOUR REMNODE PRODUCER KEY
#-----------------------------------------------------------------------------------------------------

printf "\n[********************* TAKE NOTE OF YOUR PRODUCER KEYS *********************]\n\n"
cat ./producerkeys
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# DISPLAYING YOUR REMNODE TRANSFER KEY
#-----------------------------------------------------------------------------------------------------

printf "\n[******************** TAKE NOTE OF YOUR TRANSFER KEYS **********************]\n\n"
cat ./transferkeys
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE ACCOINT 1
#-----------------------------------------------------------------------------------------------------

printf "\n[*********************** CREATING ACTIVE ACCOUNT 1 *************************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system newaccount $owneraccountname $activeproducername1 $activepublickey1 $activepublickey1 -x 120 --transfer --stake "1000.0000 REM" -p $owneraccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE ACCOINT 2
#-----------------------------------------------------------------------------------------------------

printf "\n[*********************** CREATING ACTIVE ACCOUNT 2 *************************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system newaccount $owneraccountname $activeproducername2 $activepublickey2 $activepublickey2 -x 120 --transfer --stake "1000.0000 REM" -p $owneraccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE ACCOINT 3
#-----------------------------------------------------------------------------------------------------

printf "\n[*********************** CREATING ACTIVE ACCOUNT 3 *************************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system newaccount $owneraccountname $activeproducername3 $activepublickey3 $activepublickey3 -x 120 --transfer --stake "1000.0000 REM" -p $owneraccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR REMNODE ACTIVE ACCOINT 4
#-----------------------------------------------------------------------------------------------------

printf "\n[*********************** CREATING ACTIVE ACCOUNT 4 *************************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system newaccount $owneraccountname $activeproducername4 $activepublickey4 $activepublickey4 -x 120 --transfer --stake "1000.0000 REM" -p $owneraccountname@owner
printf "\n"
read -p 'Press [Enter] key to continue...'

#-----------------------------------------------------------------------------------------------------
# WAITING 2 MINUTES FOR TRANSACTION CONFIRMATION
#-----------------------------------------------------------------------------------------------------

progress-bar() {

  local duration=${1}
  already_done() { for ((done=0; done<$elapsed; done++)); do printf "▇"; done }
  remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
  percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
  clean_line() { printf "\r"; }

  for (( elapsed=1; elapsed<=$duration; elapsed++ )); do
      already_done; remaining; percentage
      sleep 1
      clean_line

  done
  clean_line

}

printf  "\n\nWAIT 2 MINUTES FOR THE CONFIRMATION OF THE ABOVE TRANSACTIONS\n\n"

progress-bar 112

printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# CREATING YOUR MULTISIG PERMISSIONS
#-----------------------------------------------------------------------------------------------------

setupmultisig() {

printf "\n\n[*********************** CREATING ACTIVE MULTISIG ************************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli set account permission $owneraccountname active '{"threshold":3,"keys":[],"accounts":[{"permission":{"actor":"'$activeproducername1'","permission":"active"},"weight":1},{"permission":{"actor":"'$activeproducername2'","permission":"active"},"weight":1},{"permission":{"actor":"'$activeproducername3'","permission":"active"},"weight":1},{"permission":{"actor":"'$activeproducername4'","permission":"active"},"weight":1}],"waits":[]}' owner -x 120 -p $owneraccountname@owner

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# REMOVING REMCHAIN ACCOUNT PERMISSIONS
#-----------------------------------------------------------------------------------------------------

removekeypermission() {

printf "\n[*********************** REMOVING ACTION PERMISSIONS ***********************]\n\n"

owneraccountname=$(head -n 3 key1 | tail -1)

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli set action permission $owneraccountname rem.swap init NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem delegatebw NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem voteproducer NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem claimrewards NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem unregprod NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem regproducer NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem undelegatebw NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem.oracle setprice NULL -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem.token transfer NULL -x 120 -p $owneraccountname@owner

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

printf "\n[********************** REMOVING ACCOUNT PERMISSIONS ***********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli set account permission $owneraccountname safemode NULL -x 120 -p $owneraccountname@owner
remcli set account permission $owneraccountname producer NULL -x 120 -p $owneraccountname@owner
remcli set account permission $owneraccountname transfer NULL -x 120 -p $owneraccountname@owner

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# CREATING REMCHAIN ACCOUNT PERMISSIONS
#-----------------------------------------------------------------------------------------------------

setupkeypermissions() {

printf "\n[********************** CREATING ACCOUNT PERMISSIONS ***********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli set account permission $owneraccountname safemode $ownerpublickey owner -x 120 -p $owneraccountname@owner
remcli set account permission $owneraccountname producer $producerpublickey active -x 120 -p $owneraccountname@owner
remcli set account permission $owneraccountname transfer $transferpublickey active -x 120 -p $owneraccountname@owner

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# CREATING REMCHAIN ACTION PERMISSIONS
#-----------------------------------------------------------------------------------------------------

createkeypermissions() {

printf "\n[*********************** CREATING ACTION PERMISSIONS ***********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli set action permission $owneraccountname rem unregprod producer -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem regproducer producer -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem.swap init producer -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem delegatebw producer -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem voteproducer producer -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem claimrewards producer -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem.oracle setprice producer -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem undelegatebw safemode -x 120 -p $owneraccountname@owner
remcli set action permission $owneraccountname rem.token transfer transfer -x 120 -p $owneraccountname@owner

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n\n"

}

#-----------------------------------------------------------------------------------------------------
# SETTING YOUR STAKING AMOUNT
#-----------------------------------------------------------------------------------------------------

stakingamount() {

printf "\n"

while [ : ]
do
          read -p "HOW MUCH WOULD YOU LIKE TO DELEGATE TOWARDS THE PRODUCER: " stakingamount

	  if [[ $stakingamount -lt 300 ]]; then
		printf "\nERROR: DELEGATED AMOUNT SHOULDN'T BE LESS THEN 300 REM.\n\n"
                continue

	elif [[ ! "$stakingamount" = "${stakingamount%[[:space:]]*}" ]]; then
		printf "\nERROR: DELEGATED AMOUNT SHOULDN'T CONTAIN ANY SPACES.\n\n"
                continue

        elif [[ "${stakingamount//[0-9]}" ]]; then
                printf "\nERROR: DELEGATED AMOUNT SHOULD ONLY CONTAIN CHARACTERS BETWEEN [0-9].\n\n"
                continue

	elif [[ "$stakingamount" =~ ['!@#$%^&*()_+,.£'] ]]; then
		printf "\nERROR: DELEGATED AMOUNT SHOULDN'T CONTAIN ANY SYMBOLS.\n\n"
		continue

	else
                break
          fi
done

}

#-----------------------------------------------------------------------------------------------------
# DELEGATING STAKE TO YOUR PRODUCER
#-----------------------------------------------------------------------------------------------------

stakingproducer() {

printf "\n\n[********************* DELEGATING STAKE TO PRODUCER **********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system delegatebw $owneraccountname $owneraccountname "$stakingamount REM" -x 120 -p $owneraccountname@producer

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# REGISTERING AS NEW BLOCK PRODUCER 
#-----------------------------------------------------------------------------------------------------

setupblockproducer() {

printf "\n[******************** REGISTERING AS A BLOCK PRODUCER **********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system regproducer $owneraccountname $producerpublickey $domain -x 120 -p $owneraccountname@owner

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

}

#-----------------------------------------------------------------------------------------------------
# CASTING YOUR VOTES TO YOUR PRODUCER
#-----------------------------------------------------------------------------------------------------

voteproducer() {

printf "\n[********************* CASTING VOTE TO BLOCK PRODUCER **********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli system voteproducer prods $owneraccountname $owneraccountname -x 120 -p $owneraccountname@producer

printf "\n"
read -p 'Press [Enter] key to continue...'

}

finalisingproducer() {

while [ : ]
do
	read -p "WOULD YOU LIKE TO REGISTER AS A BLOCK PRODUCER? [y/n]: " yn4

  	case $yn4 in
       		y|Y|yes|YES) stakingamount
			     stakingproducer
			     setupblockproducer
			     voteproducer
	     		     break;;

       		n|N|no|NO)   break;;

       		*)   	     echo -e "\nPLEASE ANSWER USING [y/n] or [Y/N]\n";;
  	esac
done

#-----------------------------------------------------------------------------------------------------
# REMOVING OWNER AND ACTIVE KEYS
#-----------------------------------------------------------------------------------------------------

printf "\n\n[******************** REMOVING OWNER AND ACTIVE KEYS *********************]\n\n"

remcli wallet lock > /dev/null 2>&1
remcli wallet unlock --password=$walletpass > /dev/null 2>&1
remcli wallet remove_key $ownerpublickey --password=$walletpass
remcli wallet remove_key $activepublickey1 --password=$walletpass
remcli wallet remove_key $activepublickey2 --password=$walletpass
remcli wallet remove_key $activepublickey3 --password=$walletpass
remcli wallet remove_key $activepublickey4 --password=$walletpass

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n"

#-----------------------------------------------------------------------------------------------------
# REBOOTING REMNODE AND FIXING ANY PROBLEMS
#-----------------------------------------------------------------------------------------------------

sudo killall remnode
sudo remnode --config-dir ./config/ --data-dir ./data/ --fix-reversible-blocks --force-all-checks --genesis-json genesis.json
sudo remnode --config-dir ./config/ --data-dir ./data/ >> remnode.log 2>&1 &

#-----------------------------------------------------------------------------------------------------
# ADDING SWAP AND ORACLE PLUGINS TO CONFIG.INI
#-----------------------------------------------------------------------------------------------------

echo -e "\nplugin = eosio::eth_swap_plugin\n\nswap-authority =$owneraccountname@producer\n\nswap-signing-key =$producerprivatekey\n\neth-wss-provider =$ethnodeaddress\n\nplugin = eosio::rem_oracle_plugin\n\ncryptocompare-apikey =$cryptocomparekey\n\noracle-authority =$owneraccountname@producer\n\noracle-signing-key =$producerprivatekey" >> ./config/config.ini

#-----------------------------------------------------------------------------------------------------
# REMOVING FILES WHICH AINT REQUIRED ANYMORE
#-----------------------------------------------------------------------------------------------------

rm key1 key2 key3 key4 key5 key6 key7 activekeys1 activekeys2 activekeys3 activekeys4 walletpass producerkeys transferkeys producersetup producerwalletpass

printf "\n\n[******************************* COMPLETED *********************************]\n\n\n"

}

#****************************************************************************************************#
#                                      PRODUCER MAIN PROGRAM                                         #
#****************************************************************************************************#

#-----------------------------------------------------------------------------------------------------
# INSTALLING REM PROTOCOL BINARIES
#-----------------------------------------------------------------------------------------------------

wget https://github.com/Remmeauth/remprotocol/releases/download/0.4.1/remprotocol_0.4.1.amd64.deb
sudo apt install ./remprotocol_0.4.1.amd64.deb

#-----------------------------------------------------------------------------------------------------
# BOOTING REMNODE AND WALLET
#-----------------------------------------------------------------------------------------------------

wget https://remchain.remme.io/genesis.json

#-----------------------------------------------------------------------------------------------------
# CREATING A CONFIG AND DATA DIRECTORIES
#-----------------------------------------------------------------------------------------------------

mkdir data && mkdir config

#-----------------------------------------------------------------------------------------------------
# CONFIGURATION FILE (CONFIG/CONFIG.INI)
#-----------------------------------------------------------------------------------------------------

echo -e "plugin = eosio::chain_api_plugin\n\nplugin = eosio::net_api_plugin\n\nhttp-server-address = 0.0.0.0:8888\n\np2p-listen-endpoint = 0.0.0.0:9876\n\n# https://remme.io\n\np2p-peer-address = p2p.remchain.remme.io:2087\n\nverbose-http-errors = true\n\nchain-state-db-size-mb = 100480\n\nreversible-blocks-db-size-mb = 10480" > ./config/config.ini

#-----------------------------------------------------------------------------------------------------
# THE INITIAL RUN OF THE REMNODE
#-----------------------------------------------------------------------------------------------------

remnode --config-dir ./config/ --data-dir ./data/ --delete-all-blocks --genesis-json genesis.json >> remnode.log 2>&1 & > /dev/null 2>&1
sleep 7

while [ : ]
do
	systemdt=$(date '+%Y-%m-%dT%H:%M')

	if [ "$dt1" == "$systemdt" ]; then
		break
	else
		dt1=$(remcli get info | grep head_block_time | cut -c 23-38)
		dt1date=$(echo $dt1 | awk -F'T' '{print $1}' | awk -F'-' 'BEGIN {OFS="-"}{ print $3, $2, $1}')
		dt1time=$(echo $dt1 | awk -F'T' '{print $2}' | awk -F':' 'BEGIN {OFS=":"}{ print $1, $2}')

		dt2=$(tail -n 1 remnode.log | awk '{print $2}'| awk -F'.' '{print $1}')
		dt2date=$(echo $dt2 | awk -F'T' '{print $1}' | awk -F'-' 'BEGIN {OFS="-"}{ print $3, $2, $1}')
		dt2time=$(echo $dt2 | awk -F'T' '{print $2}' | awk -F':' 'BEGIN {OFS=":"}{ print $1, $2}')

		echo "Fetching blocks for [${dt1date} | ${dt1time}] | Current block date [${dt2date} | ${dt2time}]"
	fi

	echo ""
	sleep 2
done

#-----------------------------------------------------------------------------------------------------
# UPDATING AND UPGRADING PACKAGE DATABASE
#-----------------------------------------------------------------------------------------------------

sudo -S apt update && sudo -S apt upgrade -y
echo ""

#-----------------------------------------------------------------------------------------------------
# CHANGING DEFAULT SSH PORT NUMBER
#-----------------------------------------------------------------------------------------------------

while [ : ]
do

	 read -p "PLEASE ENTER A RANDOM 5 DIGIT PORT NUMBER: " portnumber

         if [[ ${#portnumber} -ne 5 ]]
         then
                 printf "\nERROR: PORT NUMBER SHOULD BE EXACTLY 5 DIGITS.\n\n"
                 continue
         elif [[ ! -z "${portnumber//[0-9]}" ]]
         then
                 printf "\nERROR: PORT NUMBER SHOULD CONTAIN NUMBERS ONLY.\n\n"
                 continue
         else
                 sudo -S sed -i "/^#Port 22/s/#Port 22/Port $portnumber/" /etc/ssh/sshd_config && sed -i '/^PermitRootLogin/s/yes/without-password/' /etc/ssh/sshd_config && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
		 break
         fi
done

#-----------------------------------------------------------------------------------------------------
# INSTALLING UNCOMPLICATED FIREWALL
#-----------------------------------------------------------------------------------------------------

sudo -S apt-get install ufw -y
sudo -S ufw allow ssh/tcp
sudo -S ufw limit ssh/tcp
sudo -S ufw allow $portnumber/tcp
sudo -S ufw allow 8888/tcp
sudo -S ufw allow 9876/tcp
sudo -S ufw logging on
sudo -S ufw enable

#-----------------------------------------------------------------------------------------------------
# INSTALLING FAIL2BAN
#-----------------------------------------------------------------------------------------------------

sudo -S apt -y install fail2ban
sudo -S systemctl enable fail2ban
sudo -S systemctl start fail2ban
sudo -S service sshd restart

#-----------------------------------------------------------------------------------------------------
# INSTALLING CANONICAL LIVEPATCH SERVICE
#-----------------------------------------------------------------------------------------------------

sudo snap install canonical-livepatch

#-----------------------------------------------------------------------------------------------------
# RUNNING THE WALLET DAEMON
#-----------------------------------------------------------------------------------------------------

remvault &
sleep 2

printf "\n"
read -p 'Press [Enter] key to continue...'
printf "\n\n"

#-----------------------------------------------------------------------------------------------------
# CREATING THE REMCLI WALLET
#-----------------------------------------------------------------------------------------------------

remcli wallet create --file walletpass
walletpass=$(cat walletpass)
echo $walletpass > producerwalletpass

printf "\n\n"

#-----------------------------------------------------------------------------------------------------
# YOUR REMNODE WALLET PASSWORD
#-----------------------------------------------------------------------------------------------------

printf "[********************* TAKE NOTE OF YOUR WALLET PASSWORD *********************]\n\n"

cat ./walletpass
printf "\n"
echo " "
read -p 'Press [Enter] key to continue...'
printf "\n\n"

#-----------------------------------------------------------------------------------------------------
# CHANGING EXISTING KEY PERMISSIONS
#-----------------------------------------------------------------------------------------------------

changekeypermission() {

printf "\n"

while [ : ]
do
	read -p "DO WANT TO CHANGE YOUR EXISTING KEY PERMISSIONS? [y/n]: " yn3

  	case $yn3 in
       		y|Y|yes|YES) newkeypermissions
			     setupmultisig
			     removekeypermission
                             setupkeypermissions
                             createkeypermissions
                             finalisingproducer
       	     		     break;;

       		n|N|no|NO)   oldkeypermissions
	     		     break;;

       		*)   	     echo -e "\nPLEASE ANSWER USING [y/n] or [Y/N]\n";;
  	esac
done

}

#-----------------------------------------------------------------------------------------------------
# CHECKING FOR EXISTING KEY PERMISSIONS
#-----------------------------------------------------------------------------------------------------

existingkeypermission() {

while [ : ]
do
	read -p "DO YOU HAVE EXISTING KEY PERMISSIONS? [y/n]: " yn2

  	case $yn2 in
       		y|Y|yes|YES) changekeypermission
	     		     break;;

       		n|N|no|NO)   newkeypermissions
			     setupmultisig
                             setupkeypermissions
                             createkeypermissions
                             finalisingproducer
       	     		     break;;

       		*)   	     echo -e "\nPLEASE ANSWER USING [y/n] or [Y/N]\n";;
  	esac
done

}

#-----------------------------------------------------------------------------------------------------
# CREATING A NEW OWNER ACCOUNT
#-----------------------------------------------------------------------------------------------------

while [ : ]
do
	read -p "DO YOU WANT TO CREATE A NEW OWNER ACCOUNT? [y/n]: " yn1

  	case $yn1 in
       		y|Y|yes|YES) newaccount
			     newkeypermissions
			     setupmultisig
                             setupkeypermissions
                             createkeypermissions
                             finalisingproducer
	     		     break;;

       		n|N|no|NO)   existingaccount
			     existingkeypermission
       	     		     break;;

       		*)   	     echo -e "\nPLEASE ANSWER USING [y/n] or [Y/N]\n";;
  	esac
done
